#실제 지원함수 및 모든 실제 작업 수행 됨

import os
import stat
import time
import hashlib
import argparse
import csv
import logging

log = logging.getLogger('main._pfish')

#이름: parsecommand 함수
#설명: 명령줄 인수를 처리하고 유효성 검사 파이썬 모듈중 argparse 사용
#입력 : 없음
#행위 : 명령줄을 처리할 수 잇는 표준라이브러리 argparse를 사용 어디서나 함수의 인수 정보를
#얻을수 있는 전역변수 gl_args를 설정함

def parseCommandLine():
    parser = argparse.ArgumentParser('Python file system hashing..p-fish')
    parser.add_argument('-v','-verbose',help='allow process meassge to be dislplayed', action='store_true')

    #상호 배타적인 필요한 그룹 설정
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--md5', help='specifies MD% algorithm',action='stroe_true')
    group.add_argument('--sha256', help='specfies SHA256 algoritm', action='stroe_true')
    group.add_argument('--sha512', help='specfies SHA512 algoritm', action='stroe_true')
    parser.add_argument('-d','--rootPath', type=ValidateDirectory, required=True, help="specify the root path for hasing")
    parser.add_argument('-r','--reportPath',type=ValidateDirectoryWritealbe, required=True, help="specify the path for reports and logs will be written")

    #검증된 인수를 보유한 전역 객체를 생성
    #객체는 _pfhish.py 모듈내 모든 함수에 사용할수 있음

    global gl_args
    global gl_hashType

    gl_args = parser.parse_args()

    if gl_args.md5:
        gl_hashType='MD5'
    if gl_args.SHA256:
        gl_hashType='SHA256'
    if gl_args.SHA512:
        gl_hashType='SHA512'
    else:
        gl_hashType="Unknown"
        logging.error('Unknown Hash Type Specified')
    DisplayMessage("Command line processed: Sucessfully")

    return

#parsercommmandLine 의끝============================

#이름 : Walkpath 함수
#설명 : 명령줄에 지정된 결로로 이동 파이썬 라이브러릴모듈 os와 sys를 사용
#입력 : 없음,명령줄 인수를 사용
#행위 : 사용자의 의해 지정된 루트 경로를 시작하는 디렉토리 구조를
#       횡단하기 위해서 표준 라이브러리 os와sys를 사용
#       각파일이 발견된 경우 ,Walkpath는 파일 해시 연산을 수행하기 위해서
#       HashFile 함수를 호출 한다

def Walkpath ():
    processCount = 0
    errorCount = 0
    oCVS = _CSVWriter(gl_args.reportPath+'fileSystemReport.csv',gl_hashType)

    #rootpath 에서 시작하는 모든 파일을 처리하는 반복문 만들고 모든 하위 디렉토리 처리됨

    log.info('Root path:'+gl_args.rootPath+"\n")

    for root, dir, files in os.walk(gl_args.rootPath):

            #for 문은 각파일에 대한 파일 이름을 획득하고 hashFile함수를 호출
        for file in files:
            fname = os.path.join(root,file)
            result = HashFile(fname,file,oCVS)

            #해시 연산이 성공한 경우 , processCount 가 증가
            if result is True:
                processCount +=1
            #성공하지 못한 경우 ErrorCount가 증가
            else:
                ErrorCount +=1

        oCVS.writerClose()

        return(processCount)



# WalkPath끝================================================================

# 이름 : HashFile 함수
# 설명 : 파일에 대한 해시 수행을 포함하는 단일 파일을 처리
#       처리된 파일과 관련된 메타데이터를 추출
#       파이썬 표준 라이버리 무듈 hashlib,os,sys를 사용
#
#입력 : theFile = 파일 의 전체 경로
#       simeName = 파일 이름 자체
#행위 : 파일 해시를 시도 하고 메타데이터를 추출
#      성공적인 해시파일을 위해 GeneratorReport 호출



def HashFile(theFile, simpleName, o_result):

    #경로가 유효한지 확인
    if os.path.exists(theFile):
        #경로가 심볼 링크가 아닌지 확인
        if not os.path.islink(theFile) and os.path.isfile(theFile) and os.path.isfile(theFile) and os.path.isfile(
                theFile):

            #파일이 실재하는지 확인
            if os.path.isfile(theFile):

                try:
                    #파일 열기를 시도
                    f= open(theFile,'rb')
                except IOError:
                    #열기에 실패하는 경우오류보고
                    log.warning('Open Failed:'+theFile)
                    return
                else:
                    try:
                        #파일 읽기를 시도
                        rd = f.read()
                    except IOError:
                        #읽기에 실패하는 경우 파일을 닫고 오류 보고
                        f.close()
                        log.warning('reaed Failed :'+theFile)
                        return
                    else:
                        # 파일 읽기 성공하면 이파일로부터 읽을수 있음
                        # 파일상태 조회

                        theFileStats = os.stat(theFile)
                        (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(theFile)

                        # 파일이름 출력
                        DisplayMessage("Processing File: " + theFile)

                        # 파일 사이즈 출력
                        fileSize = str(size)

                        # 파일 mac타임 출력
                        modifiedTime = time.ctime(mtime)
                        accessTime = time.ctime(atime)
                        createdTime = time.ctime(ctime)

                        ownerID = str(uid)
                        groupID = str(gid)
                        fileMode = bin(mode)

                        # 파일해쉬 처리

                        if gl_args.md5:
                            # Calcuation and Print the MD5
                            hash = hashlib.md5()
                            hash.update(rd)
                            hexMD5 = hash.hexdigest()
                            hashValue = hexMD5.upper()
                        # CDH 1-21-15 Added Hashing Case for SHA1
                        elif gl_args.sha1:
                            hash = hashlib.sha1()
                            hash.update(rd)
                            hexSHA1 = hash.hexdigest()
                            hashValue = hexSHA1.upper()
                        elif gl_args.sha256:
                            hash = hashlib.sha256()
                            hash.update(rd)
                            hexSHA256 = hash.hexdigest()
                            hashValue = hexSHA256.upper()
                        elif gl_args.sha512:
                            # Calculate and Print the SHA512
                            hash = hashlib.sha512()
                            hash.update(rd)
                            hexSHA512 = hash.hexdigest()
                            hashValue = hexSHA512.upper()
                        else:
                            log.error('Hash not Selected')
                        # File processing completed
                        # Close the Active File
                        print
                        "================================"
                        f.close()

                        # write one row to the output file

                        o_result.writeCSVRow(simpleName, theFile, fileSize, modifiedTime, accessTime, createdTime,
                                             hashValue, ownerID, groupID, mode)

                        # CDH 1-21-15 Added Entry to Log File for each hashed file
                        log.info("+-------------------------------------------------------------")
                        log.info("+File Path:  " + theFile)
                        log.info("+File Name:  " + simpleName)
                        log.info("+Hash Type:  " + gl_hashType)
                        log.info("+Hash Value: " + hashValue)
                        log.info("+-------------------------------------------------------------\n")

                        return True
            else:
                log.warning('[' + repr(simpleName) + ', Skipped NOT a File' + ']')
                return False
        else:
            log.warning('[' + repr(simpleName) + ', Skipped Link NOT a File' + ']')
            return False
    else:
        log.warning('[' + repr(simpleName) + ', Path does NOT exist' + ']')
    return False

#HashFile 함수의 끝
#
#이름 : ValidateDirectory 함수
#설명 : 디렉토리 경로가 존재하는지 그리고 읽기 가능한지 유효성 검사 기능 인수에 대한 유효성 검사만 가능
#
#입력 : 디렉토리 경로 문자열
#행위 : 디렉토리 문자열을 반환 하는 경우 유효함
#       유효하지 않는경우 argparese내에 ArgumentTypeError로 분기 이는 argparese의해
#       사용자에게 차례대로 보고됨


def ValidateDirectory(theDir):

    #디렉토리 경로의 유효성 검사
    if not os.path.isdir(theDir):
        raise argparse.ArgumentTypeError('Directory does not exits')

    #경로가 읽기 가능한지 검사
    if os.access(theDir, os.R_OK):
        return theDir
    else:
        raise argparse.ArgumentTypeError('Directory is not readable')



#ValidateDirectory 끝 =======================================================
#
#이름 : ValidateDirectoryWriteable 함수
#설명 : 디렉토리 경로가 존재하는지 그리고 쓰기 가능한지 유효성 검사 기능
#        인수에대한 유효성 검사에만 사용
#입력 : 디렉토리 경로 문자
#설명 : 디렉토리 경로가 존재하는지 그리고 쓰기 가능한지 유효성 검사 기능 인수에 대한 유혀성 검사에만 사용
#행위 : 디렉토리 문자열을 반환하는 겨우 유효함
#       유효하지 않는 경우, argparse 내에 ArgumnetTypeError으로 분기
#       이는 argpasrse에 의해 사용자에게 차레대로 보고.


def ValidateDirectoryWriteable(thedir):

    #디렉토리 경로의 유효성을검사
    if not os.path.isdir(thedir):
        raise argparse.ArgumentTypeError('Directory dose not exits')

    #경로가 읽기를 가능한지 검사
    if os.access(thedir,os.R_OK):
        return thedir
    else:
        raise argparse.ArgumentTypeError('Directory is not Writeable')


#ValidateDirectoryWriteable의 끝=============================




#==========================================================================
#이름 : DisplayMessage(msg) 함수
#설명 : 자세한 명령중 옵션이 있는 경우 메시지를 표시
#입력 : 메시지 타입 문자열
#행위 : 메시지를 표시하는 표준 라이버러리 인쇄 기능 사용


def DisplayMessage(msg):

    if gl_args.verbose:
        print(msg)
    return


#DisplayMessage의 끝============================================================
#
#클래스 : _CSVWriter
#설명 : 쉼표로 구분된 값 작업과 관련된 모든 메소드를 다룸
#메소드 생성자 : CSV 파일을 초기화
#               writeCVSRow : CSV파일에 단일 행을 기록
#               writeCVSClose : CVS파일을 닫음


class _CSVWriter:

    def __init__(self,fileName,hashType):
        try:
            #writer 객체를 생성하고 머리글 행을 기록
            self.csvFile = open(fileName,'wb')
            self.writer = csv.writer(self.csvFile,delimiter=',',quoting=csv.QUOTE_ALL)
            self.writer.writerow(('File','Path','Size','Modified Time','Access Time',
                                  'Create Time',hashType,'Owner','Group','Mode'))
        except:
            log.error('CSV File Failure')
    def writeCSVRow(self,fileName,filePath,fileSize,mTime,aTime,cTime,hashVal,own,grp,mod):
        self.writer.writerow((fileName,filePath,fileSize,mTime,aTime,cTime,own,grp,mod))

        def writerClose(self):
            self.csvFile.close()


